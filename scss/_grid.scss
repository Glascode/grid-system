.grid {
  display: grid;
  grid-template-columns: repeat(12, 1fr);
  grid-gap: $gap;
}

@each $breakpoint in map_keys($breakpoints) {
  @include media($breakpoint, $breakpoints) {
    $infix: infix($breakpoint, $breakpoints);

    @for $number from 1 through $columns {
      .grid.columns#{$infix}-#{$number} {
        grid-template-columns: repeat($number, 1fr);
      }
    }

    @each $size, $length in $spacers {
      .gap#{$infix}-#{$size} {
        grid-gap: $length;
      }
    }

    // Columns control

    @for $size from 1 through $columns {
      .c#{$infix}-#{$size} {
        grid-column-end: span $size;
      }
    }

    @for $start from 1 through $columns {
      @for $end from $start through $columns {
        .c#{$infix}-#{$start}-#{$end} {
          grid-column: #{$start} / #{$end + 1};
        }
      }

      .c#{$infix}-#{$start}-e {
        grid-column: #{$start} / -1;
      }
    }

    @for $start from 1 through $columns {
      @for $span from 1 through $columns - $start {
        .c#{$infix}-#{$start}--#{$span} {
          grid-column-start: $start;
          grid-column-end: span $span;
        }
      }
    }

    .row#{$infix} {
      grid-column: 1 / -1;
    }

    // Rows control

    @for $size from 1 through $columns {
      .r#{$infix}-#{$size} {
        grid-row-end: span $size;
      }
    }

    .col#{$infix} {
      grid-row: 1 / -1;
    }

    // Order control

    @for $order from 1 through $orders {
      .o#{$infix}-#{$order} {
        order: $order;
      }
    }

    .o#{$infix}-first {
      order: -999;
    }

    .o#{$infix}-last {
      order: 999;
    }
  }
}
